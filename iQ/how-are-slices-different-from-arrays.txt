
How Are Slices Different from Arrays in Go

In Go, both arrays and slices are used to store sequences of elements, but they differ significantly in terms of flexibility, usage, and behavior.

1. Size
- Arrays: Fixed in size. The size is part of the type.
  Example: [5]int is different from [10]int.
- Slices: Dynamic in size. They can grow or shrink.
  Example: []int

2. Declaration
- Array: var a [3]int
- Slice: var s []int

3. Initialization
- Array: a := [3]int{1, 2, 3}
- Slice: s := []int{1, 2, 3}

4. Memory and Reference
- Arrays are value types: assigning an array copies all its elements.
- Slices are reference types: assigning a slice shares the underlying array.

Example:
a := [3]int{1, 2, 3}
b := a
b[0] = 9
fmt.Println(a) // [1 2 3]

s1 := []int{1, 2, 3}
s2 := s1
s2[0] = 9
fmt.Println(s1) // [9 2 3]

5. Resizing
- Arrays cannot be resized once declared.
- Slices can be appended using the append() function:
  s = append(s, 4, 5)

6. Built-in Functions
- Slices work with built-in functions like `append()`, `copy()`, and `len()`/`cap()` effectively.
- Arrays have limited support and are not often passed around.

7. Usage in Functions
- Arrays are passed by value (copied).
- Slices are passed by reference (shared memory).

8. Underlying Data Structure
- A slice has three parts: pointer to the underlying array, length, and capacity.

9. Common Practice
- Arrays are rarely used except in special cases.
- Slices are the idiomatic way to work with sequences in Go.

Conclusion:
Use slices when you need flexibility, dynamic sizing, and efficient function passing. Arrays are more for lower-level control or when size must be strictly fixed.
