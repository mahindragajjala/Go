What is the make() Function Used For in Go

In Go, the `make()` function is used to create and initialize "slices", 
"maps", and "channels" â€” the three builtin reference types.

Unlike `new()`, which allocates memory and returns a pointer, `make()` 
initializes the internal data structure and returns the value itself 
(not a pointer).

1. Creating a Slice with make()

Syntax:
make([]Type, length, capacity)

Example:
s := make([]int, 3, 5)
fmt.Println(s) // [0 0 0]

 `length`: number of elements initially present.
 `capacity`: total space allocated (optional).
 If capacity is not provided, it is set to the same as length.

2. Creating a Map with make()

Syntax:
make(map[KeyType]ValueType, initialCapacity)

Example:
m := make(map[string]int, 10)
m["apple"] = 2
fmt.Println(m) // map[apple:2]

 The second parameter (capacity) is optional and used to optimize memory.

3. Creating a Channel with make()

Syntax:
make(chan Type, bufferSize)

Example:
ch := make(chan int, 2)
ch < 10
ch < 20
fmt.Println(<ch) // 10

 `bufferSize` is optional. If 0, it's an unbuffered channel.

4. Difference Between make() and new()
 `make()` returns an initialized (nonzero) value of type slice, map, or 
  channel.
 `new()` returns a pointer to a zeroed value of any type.

Example:
p := new([]int)  // ([]int)
s := make([]int, 3) // []int



Conclusion:
Use `make()` when working with slices, maps, or channels that need to be initialized before use. It is idiomatic and necessary for these reference types.
