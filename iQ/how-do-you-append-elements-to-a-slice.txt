How Do You Append Elements to a Slice in Go

In Go, slices are dynamic and can grow as needed. The built-in `append()` function is used to add elements to a slice.

1. Basic Syntax
append(slice, elements)

Example:
s := []int{1, 2, 3}
s = append(s, 4)
fmt.Println(s) // Output: [1 2 3 4]

2. Appending Multiple Elements
You can append more than one element at a time:
s = append(s, 5, 6)
fmt.Println(s) // Output: [1 2 3 4 5 6]

3. Appending Another Slice
Use `...` to expand another slice:
t := []int{7, 8}
s = append(s, t...)
fmt.Println(s) // Output: [1 2 3 4 5 6 7 8]

4. Appending Strings (or other types)
The same `append()` function works for slices of other types:
names := []string{"Alice", "Bob"}
names = append(names, "Charlie")
fmt.Println(names) // Output: ["Alice" "Bob" "Charlie"]

5. Appending in Loops
for i := 0; i < 5; i++ {
    s = append(s, i)
}
fmt.Println(s) // Output includes added loop values

6. Appending and Capacity
If the slice has enough capacity, `append()` reuses the underlying array.
If not, it allocates a new array and copies the old data.

7. Return Value
Always capture the return value of `append()` because it might return a new underlying array.

Conclusion:
Use `append()` to add one or more elements or even another slice to an existing slice. Remember to always assign the result back to the slice.
