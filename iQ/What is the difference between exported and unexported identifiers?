What is the difference between exported and unexported identifiers?


In Go (Golang), the difference between exported and unexported identifiers 
is based on their "capitalization".

‚úÖ 1. What is an Identifier?
							An identifier is the name used for:
																Variables
																Constants
																Functions
																Types
																Struct fields
																Interfaces
																Packages

‚úÖ 2. Exported vs Unexported: Core Rule
				Type	    First Letter	Accessibility
				Exported	Uppercase	    Visible outside the package
				Unexported	Lowercase	    Private to the current package

								üîπ Example:
											package mypkg
											var ExportedVar = "I can be accessed outside"
											var unexportedVar = "I cannot be accessed outside"
											func ExportedFunc() {
												// accessible outside
											}
											func unexportedFunc() {
												// only within this package
											}
‚úÖ 3. Usage in Another Package
									package main

									import (
										"fmt"
										"mypkg"
									)

									func main() {
										fmt.Println(mypkg.ExportedVar)      // ‚úÖ OK
										// fmt.Println(mypkg.unexportedVar) // ‚ùå Compile error

										mypkg.ExportedFunc()                // ‚úÖ OK
										// mypkg.unexportedFunc()           // ‚ùå Compile error
									}
‚úÖ 4. Exporting Struct Fields
							Struct fields follow the same rule:
							type Person struct {
								Name string  // Exported
								age  int     // Unexported
							}
							Only Name can be accessed from other packages, age is private.
