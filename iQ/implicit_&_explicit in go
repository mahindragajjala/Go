✅ Explicit (Clear, Direct, Verbose)
Definition: Explicit means that the programmer writes out everything clearly. The compiler doesn’t need to guess anything 
— it's all stated clearly in the code.
In Go: Go encourages explicitness for clarity, maintainability, and safety.

✅ Implicit (Implied, Inferred, Assumed)
Definition: Implicit means something is not directly stated but understood/inferred by the compiler or reader.

In Go: Go avoids most implicit behaviors (like implicit type casting), but some things are still inferred (like variable type using :=).


 Concept                     Explicit in Go                                            Implicit in Go                                                       

 Variable Declaration    `var age int = 25` <br>(type clearly stated)              `age := 25` <br>(type inferred as int)                               
 Type Conversion         `float64(x)` <br>(manually convert int to float64)        ❌ No implicit conversion (Go does not allow `x + 1.5` if `x` is int) 
 Function Return Types   `func add(a int, b int) int` <br>(return type declared)   ❌ No implicit return types — all are explicit                        
 Interface Satisfaction  No `implements` keyword — compiler checks automatically   ✔ Implicit interface satisfaction                                    
 Imports                 `import "fmt"` <br>(You must explicitly import packages)  ❌ No implicit imports                                                
 Pointer Dereferencing   Go does it *partially* for you when calling methods       `p.Name()` automatically handles `(*p).Name()`                       

1. 🟩 Variable Declaration
Explicit:
var name string = "Mahindra"
You explicitly state the type as string.

Implicit:
name := "Mahindra"
The compiler infers the type from the value "Mahindra".

2. 🟩 Type Conversion
Explicit:
var a int = 5
var b float64 = float64(a) // explicit conversion

Implicit (❌ NOT ALLOWED in Go):
var a int = 5
var b float64 = a + 1.5 // ❌ error: mismatched types
In languages like Python/C, this might be allowed. But Go requires explicit type conversion.

3. 🟩 Interface Satisfaction

type Reader interface {
    Read(p []byte) (n int, err error)
}

type MyReader struct{}

func (r MyReader) Read(p []byte) (int, error) {
    return 0, nil
}
MyReader implicitly implements the Reader interface — no need for implements keyword like Java or C#.
This is one of the few intentional implicit designs in Go — promoting flexibility and loose coupling.

4. 🟩 Pointer Dereferencing in Method Calls
type Person struct {
    Name string
}
func (p *Person) SayHi() {
    fmt.Println("Hi,", p.Name)
}
func main() {
    p := Person{Name: "Golang"}
    p.SayHi() // Implicitly treated as (&p).SayHi()
}
Go implicitly handles pointer dereferencing for method calls. It sees p.SayHi() and converts it to (&p).SayHi() automatically.

