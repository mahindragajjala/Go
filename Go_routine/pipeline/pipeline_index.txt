Here‚Äôs a curated list of coding questions to practice pipelines in Go, progressing from basic to advanced. These problems help you build intuition around pipelines, channels, concurrency, fan-out/fan-in, cancellation, and error handling.



 üü¢ Beginner Level: Basic Pipeline Concepts

1. Number Doubler
   ‚û§ Read a list of integers and double each value using a pipeline.
   ‚û§ Stages: Generator ‚Üí Doubler ‚Üí Printer

2. Sentence Word Splitter
   ‚û§ Given a list of sentences, split each into words.
   ‚û§ Stages: Generator ‚Üí Splitter ‚Üí Printer

3. Even Number Filter
   ‚û§ Filter even numbers from a list.
   ‚û§ Stages: Generator ‚Üí Filter ‚Üí Printer

4. Uppercase Transformer
   ‚û§ Convert lowercase words to uppercase.
   ‚û§ Stages: Generator ‚Üí ToUpper ‚Üí Printer

5. String Reverser
   ‚û§ Reverse each string in a pipeline.
   ‚û§ Stages: Generator ‚Üí Reverser ‚Üí Printer



 üü° Intermediate Level: Pipeline Composition and Optimization

6. Multi-stage Arithmetic
   ‚û§ For a list of numbers, apply: square ‚Üí add 10 ‚Üí halve
   ‚û§ Stages: Generator ‚Üí Square ‚Üí Add10 ‚Üí Halve ‚Üí Printer

7. Word Length Filter
   ‚û§ From sentences, extract words > 5 letters.
   ‚û§ Stages: Generator ‚Üí Split ‚Üí Filter ‚Üí Printer

8. Buffered Pipeline Performance
   ‚û§ Implement a pipeline using buffered channels to measure performance difference.

9. Worker Pool for Heavy Computation
   ‚û§ Use a pool of goroutines to compute factorials for a list of numbers.
   ‚û§ Stages: Generator ‚Üí Worker Pool ‚Üí Printer

10. Pipeline Timer
    ‚û§ Measure how long each stage takes in a pipeline.



 üî¥ Advanced Level: Fan-Out, Fan-In, Context Cancellation, Errors

11. Fan-Out Fan-In Prime Filter
    ‚û§ Generate numbers, filter primes using multiple workers, and merge results.

12. Concurrent File Processor
    ‚û§ Given a list of filenames, read file content concurrently, clean text, and count word frequency.

13. Context Cancellation in Pipeline
    ‚û§ Cancel the pipeline if a word ‚ÄúSTOP‚Äù is encountered.

14. Pipeline with Error Handling
    ‚û§ Simulate errors in one stage (e.g., division by zero), propagate and stop pipeline safely.

15. Rate-Limited Pipeline
    ‚û§ Limit the rate of data processing using time.Ticker or time.Sleep.

16. Streaming Log Processor
    ‚û§ Process a real-time stream of logs, filter by log level, and write to output concurrently.

17. Chained Transformations on Images (mock)
    ‚û§ Simulate stages like resize ‚Üí grayscale ‚Üí watermark ‚Üí save using image filenames.

18. CSV Processing Pipeline
    ‚û§ Load CSV rows, filter rows, map fields, and write to output.

19. Real-time Alert System
    ‚û§ Simulate real-time sensor data and use pipeline stages to detect anomalies.

20. Deadlock Debugger
    ‚û§ Create a pipeline with an intentional deadlock and then fix it.



 üß† Tip:

For each problem:

* Start with sequential stages.
* Gradually introduce goroutines, channels, context, sync.WaitGroup, etc.
* Add logging to see concurrency in action.



Would you like detailed code templates or solutions for a few of these? I can help you implement any of them step-by-step.
