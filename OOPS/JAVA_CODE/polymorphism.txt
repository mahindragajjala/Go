Polymorphism in Java

Java supports two types of polymorphism:
Compile-Time (Method Overloading)
Runtime (Method Overriding)

Compile-Time Polymorphism (Overloading)
Same method name, different parameters:

class Calculator {
    int add(int a, int b) {
        return a + b;
    }

    double add(double a, double b) {
        return a + b;
    }
}

Runtime Polymorphism (Overriding)
Superclass method is overridden by a subclass.
class Animal {
    void sound() {
        System.out.println("Some sound...");
    }
}

class Dog extends Animal {
    void sound() {
        System.out.println("Bark");
    }
}

class Cat extends Animal {
    void sound() {
        System.out.println("Meow");
    }
}

public class Main {
    public static void main(String[] args) {
        Animal a;           // Reference of parent
        a = new Dog();      // Object of child
        a.sound();          // Bark

        a = new Cat();      // Now it's a cat
        a.sound();          // Meow
    }
}
